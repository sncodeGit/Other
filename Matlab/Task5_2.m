% Go to main() function
main();

function [] = main()
    % Решим уравнение системы 1):
    % y'' + y = 0 с начальными условиями:
    % y(0) = 0
    % y'(0) = 2
    % Для этого произведём замену [y' = z]:
    % z' = -y
    % y' = z
    % Начальные условия:
    % y(0) = 0
    % z(0) = 2
    
    % Красный - скорость
    % Зелёный - угол отклонения от вертикали
    
    global right_y right_z start_y start_z
    right_y = @(x,y,z) z;
    right_z = @(x,y,z) -y;
    start_y = [0, 0.0];
    start_z = [0, 2.0];
    
    res = runge_kutta(8, 0.01);
    
    % Построим график изменения угла отклонения от вертикали
    plot(res(1, :), res(3, :), 'g');
    title("1 система при начальной скорости 2 (угол)");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    % Также для наглядности построим график изменения скорости маятника
    plot(res(1, :), res(2, :), 'r');
    title("1 система при начальной скорости 2 (скорость)");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    % Вид полученных графиков объясняются достаточно тривиально
    % Угол и скорость изменяются в пределах определённых значений, что 
    % обуславливается природой колебательного движения.
    % Максимальный угол достигается в верхней точке. Скорость равна нулю 
    % при достижении этой самой точки. Начальная скорость, в соответствии с 
    % условиями задачи, равна 2. При этом колебания не затухают, то есть
    % значения угла и скорости не изменяются со временем, так как трение
    % отсутствует
    
    % Исследуем поведение системы при начальной скорости равной нулю
    
    global right_y right_z start_y start_z
    right_y = @(x,y,z) z;
    right_z = @(x,y,z) -y;
    start_y = [0, 0.0];
    start_z = [0, 0.0];
    
    res = runge_kutta(8, 0.01);
    
    % Построим график изменения угла отклонения от вертикали
    plot(res(1, :), res(3, :), 'g');
    title("1 система при начальной скорости 0 (угол)");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    % Также для наглядности построим график изменения скорости маятника
    plot(res(1, :), res(2, :), 'r');
    title("1 система при начальной скорости 0 (скорость)");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    % Поведение системы также ожидаемо
    % Нет начальной скорости - нет движения (изменения угла и изменения скорости)
    
    % Исследуем уравнение, описывающее систему 2):
    % y'' + v*y' + y = 0, y(0) = 0, y'(0) = 2
    % Пусть y' = z:
    % z' = -v*z - y
    % y' = z
    % Начальные условия:
    % y(0) = 0
    % z(0) = 2
    % P.S. Не совсем понимаю, сохраняется ли для этой системы условие 
    % y'(0) = 2, но конкретное начальное значение скорости в целом не влияет
    % на общий вид графика, изменяя только степень "растягивания" графика
    % вдоль оси Oy.

    % Построим несколько графиков для различных значений коэффициента v
    global right_y right_z start_y start_z
    right_y = @(x,y,z) z;
    start_y = [0, 0.0];
    start_z = [0, 2.0];
    
    right_z = @(x,y,z) -0.01*z-y;
    res_v_1 = runge_kutta(150, 0.01);
    
    right_z = @(x,y,z) -0.2*z-y;
    res_v_2 = runge_kutta(25, 0.01);
    
    right_z = @(x,y,z) -1*z-y;
    res_v_3 = runge_kutta(15, 0.01);
    
    right_z = @(x,y,z) -2*z-y;
    res_v_4 = runge_kutta(10, 0.01);
    
    right_z = @(x,y,z) -3.5*z-y;
    res_v_5 = runge_kutta(20, 0.01);
    
    right_z = @(x,y,z) -5*z-y;
    res_v_6 = runge_kutta(20, 0.01);
    
    plot(res_v_1(1, :), res_v_1(3, :), 'g');
    title("2 система (угол), v = 0.01");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    plot(res_v_1(1, :), res_v_1(2, :), 'r');
    title("2 система (скорость), v = 0.01");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    plot(res_v_2(1, :), res_v_2(3, :));
    title("2 система (угол), v = 0.2");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    plot(res_v_2(1, :), res_v_2(2, :), 'r');
    title("2 система (скорость), v = 0.2");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    plot(res_v_3(1, :), res_v_3(3, :), 'g');
    title("2 система (угол), v = 1");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    plot(res_v_3(1, :), res_v_3(2, :), 'r');
    title("2 система (скорость), v = 1");
    xlabel("Время");
    ylabel("Скорость");
    figure;

    plot(res_v_4(1, :), res_v_4(3, :), 'g');
    title("2 система (угол), v = 2");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    plot(res_v_4(1, :), res_v_4(2, :), 'r');
    title("2 система (скорость), v = 2");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    plot(res_v_5(1, :), res_v_5(3, :), 'g');
    title("2 система (угол), v = 3");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    plot(res_v_5(1, :), res_v_5(2, :), 'r');
    title("2 система (скорость), v = 3");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    plot(res_v_6(1, :), res_v_6(3, :), 'g');
    title("2 система (угол), v = 5");
    xlabel("Время");
    ylabel("Угол");
    figure;
    
    plot(res_v_6(1, :), res_v_6(2, :), 'r');
    title("2 система (скорость), v = 5");
    xlabel("Время");
    ylabel("Скорость");
    figure;
    
    % Как видно, в этой системе присутствует постепеннон затухание 
    % (уменьшение скорости колебаний). При этом величина v определяет
    % скорость затухания колебаний.
    
    % Решения обеих систем будут устойчивы по Ляпунову.
    % При этом решения второй системы имеют более сильную устойчивость -
    % ассимптотическую устойчивость (оно устойчиво и на бесконечности в
    % пределе равно нулю)
    
    % Например, в построенном далее графике максимальное расстояние между
    % красным графиком и двумя другими достигается в "холмах" синуса, при
    % этом с учётом затухания колебаний это расстояние будет уменьшаться с
    % каждым следующим циклом колебания
    global right_y right_z start_y start_z
    right_z = @(x,y,z) -0.01*z-y;
    right_y = @(x,y,z) z;
    start_y = [0, 0.0];
    
    start_z = [0, 2.0];
    res_v_1 = runge_kutta(20, 0.01);
    start_z = [0, 2.5];
    res_v_2 = runge_kutta(20, 0.01);
    start_z = [0, 1.5];
    res_v_3 = runge_kutta(20, 0.01);
    
    hold on;
    plot(res_v_1(1, :), res_v_1(3, :), 'r');
    plot(res_v_2(1, :), res_v_2(3, :), 'b');
    plot(res_v_3(1, :), res_v_3(3, :), 'y');
    title("Иллюстрация понятия устойчивости по Ляпунову")
    hold off;
end

% Решение системы диффур методом Рунге-Кутты 4 порядка
% b - правая граница отрезка
% delta - шаг метода
function res = runge_kutta(b, delta)
    global right_y right_z start_y start_z
    
    z = start_z(2);
    y = start_y(2);
    
    X = start_z(1):delta:b;
    Z = z;
    Y = y;
    
    for x = (start_z(1)+delta):delta:b
        next_val = runge_kutta_step(x, y, z, delta);
        z = next_val(1);
        y = next_val(2);
        Z = [Z z];
        Y = [Y y];
    end
    
    res = [X; Z; Y];
end

% Реализация шага метода Рунге-Кутты 4 порядка
function next_val = runge_kutta_step(x, y, z, delta)
    global right_y right_z
    k1 = delta * right_y(x, y, z);
    l1 = delta * right_z(x, y, z);
    k2 = delta * right_y(x + delta/2.0, y + k1/2.0, z + l1/2.0);
    l2 = delta * right_z(x + delta/2.0, y + k1/2.0, z + l1/2.0);
    k3 = delta * right_y(x + delta/2.0, y + k2/2.0, z + l2/2.0);
    l3 = delta * right_z(x + delta/2.0, y + k2/2.0, z + l2/2.0);
    k4 = delta * right_y(x + delta, y + k3, z + l3);
    l4 = delta * right_z(x + delta, y + k3, z + l3);
    next_y = y + (k1 + 2*k2 + 2*k3 + k4) / 6.0;
    next_z = z + (l1 + 2*l2 + 2*l3 + l4) / 6.0;
    next_val = [next_z next_y];
end
